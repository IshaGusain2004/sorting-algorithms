#include <stdio.h>

void merge(int arr[], int left[], int right[], int leftLen, int rightLen) {
    int i = 0; // index of left subarray
    int j = 0; // index of right subarray
    int k = 0; // index of merged array

    // Merge left and right subarrays into a single sorted array
    while (i < leftLen && j < rightLen) {
        if (left[i] <= right[j]) {
            arr[k++] = left[i++];
        } else {
            arr[k++] = right[j++];
        }
    }

    // Copy any remaining elements of left subarray into the merged array
    while (i < leftLen) {
        arr[k++] = left[i++];
    }

    // Copy any remaining elements of right subarray into the merged array
    while (j < rightLen) {
        arr[k++] = right[j++];
    }
}

void mergeSort(int arr[], int len) {
    if (len < 2) {
        return; // Base case: array is already sorted
    }

    // Divide the array into two subarrays
    int mid = len / 2;
    int left[mid];
    int right[len - mid];
    for (int i = 0; i < mid; i++) {
        left[i] = arr[i];
    }
    for (int i = mid; i < len; i++) {
        right[i - mid] = arr[i];
    }

    // Recursively sort the left and right subarrays
    mergeSort(left, mid);
    mergeSort(right, len - mid);

    // Merge the sorted left and right subarrays
    merge(arr, left, right, mid, len - mid);
}

int main() {
    int arr[] = {10, 2, 3, 8, 6, 1, 4, 5, 7, 9};
    int len = sizeof(arr) / sizeof(arr[0]);

    printf("Unsorted array:\n");
    for (int i = 0; i < len; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    mergeSort(arr, len);

    printf("Sorted array:\n");
    for (int i = 0; i < len; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    return 0;
}
