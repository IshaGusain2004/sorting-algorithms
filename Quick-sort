#include <stdio.h>

// function to swap two values in an array
void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

// function to partition the array into two sub-arrays
int partition(int arr[], int low, int high) {
    int pivot = arr[high]; // choose the last element as pivot
    int i = low - 1; // index of smaller element
    
    // traverse through the array
    for (int j = low; j <= high - 1; j++) {
        // if current element is smaller than pivot
        if (arr[j] < pivot) {
            i++; // increment index of smaller element
            swap(&arr[i], &arr[j]); // swap arr[i] and arr[j]
        }
    }
    
    // swap arr[i+1] and arr[high] (or pivot)
    swap(&arr[i + 1], &arr[high]);
    return i + 1; // return the partition index
}

// function to implement quicksort
void quicksort(int arr[], int low, int high) {
    if (low < high) {
        // partition the array
        int pi = partition(arr, low, high);
        
        // recursively sort the sub-arrays
        quicksort(arr, low, pi - 1);
        quicksort(arr, pi + 1, high);
    }
}

int main() {
    int arr[] = {5, 1, 3, 9, 4, 6, 7, 2, 8}; // the array to be sorted
    int n = sizeof(arr) / sizeof(arr[0]); // calculate the size of the array
    
    quicksort(arr, 0, n - 1); // sort the array
    
    printf("Sorted array: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]); // print the sorted array
    }
    
    return 0;
}
